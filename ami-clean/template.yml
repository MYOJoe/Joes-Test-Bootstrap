---
Description: Enables automated cleanup of dated AMIs
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Environment:
    Description: Name of the environment being deployed
    Type: String
    AllowedValues:
      - dev
      - prod

  ThresholdDays:
    Description: Number of days to keep an AMI for
    Type: String
    Default: "3"

  EnableDelete:
    Description: Number of days to keep an AMI for
    Type: String
    Default: "True"

  Limit:
    Description: Maximum number of AMIs that can be delted
    Type: String
    Default: "300"

Resources:

  #############################################################################
  # AMI Cleaning Function
  #############################################################################

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "cron(0 23 * * ? *)"  # 11:00pm every night
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt
            - AMICleanFunction
            - Arn
          Id: "AMICleanFunction"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AMICleanFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRule"
          - "Arn"

  AMICleanFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables:
          threshold_days: !Ref ThresholdDays
          enable_delete: !Ref EnableDelete
          region: !Ref AWS::Region
          limit: !Ref Limit
      Code:
        ZipFile: !Sub |
          from __future__ import print_function

          import os
          import boto3
          from datetime import datetime, timedelta
          from dateutil.parser import parse

          THRESHOLD = int(os.getenv('threshold_days', 3))
          ENABLE_DELETE = os.getenv('enable_delete', True)
          REGION = os.getenv('region', 'ap-southeast-2')
          LIMIT = int(os.getenv('limit', 400))

          if ENABLE_DELETE is not False:
              if ENABLE_DELETE in ['true', 'True', '1', 't', 'y']:
                  ENABLE_DELETE = True
              else:
                  ENABLE_DELETE = False

          client = boto3.client('ec2', REGION)
          ec2 = boto3.resource("ec2")

          def check_remove_image(image, threshold_date):
              if exceeds_threshold(image, threshold_date):
                  remove_image(image)
                  return True
              return False

          def remove_image(image):
              # Remove the image
              snaps = []
              for storage in image['BlockDeviceMappings']:
                  snaps.append(storage['Ebs']['SnapshotId'])

              print('{} is being deleted'.format(image['ImageId']))
              if ENABLE_DELETE:
                  client.deregister_image(ImageId=image['ImageId'])
              for snapshot in snaps:
                  print('{} is being deleted'.format(snapshot))
                  if ENABLE_DELETE:
                      client.delete_snapshot(SnapshotId=snapshot)

          def exceeds_threshold(images, threshold_date):
              create_ts = images['CreationDate']
              date = parse(create_ts)
              # Just strip the timezone info, it doesn't have to be super accurate
              # within 24 hours is good enough
              date = date.replace(tzinfo=None)

              return date < threshold_date

          def lambda_handler(event, context):
              if not ENABLE_DELETE:
                  print('No Op enabled, no images will actually be deleted.')
              oldest_allowed = datetime.utcnow() - timedelta(days=THRESHOLD)
              print('Pruning AMIs older than {}'.format(str(oldest_allowed)))
              deleted_count = 0
              used_images = {
                  instance.image_id for instance in ec2.instances.all()
              }

              images = client.describe_images(Owners=['self'])['Images']
              if images is not None:
                  for image in images:
                      if ENABLE_DELETE and deleted_count >= LIMIT:
                          # Only stop at the limit if this is NOT a no op
                          break
                      if image['ImageId'] not in used_images:
                          was_removed = check_remove_image(image, oldest_allowed)
                          if was_removed:
                              deleted_count += 1
                      else:
                          print('Image {} is in use, skipping deletion'.format(image['ImageId']))
                          continue

              if not ENABLE_DELETE:
                  print('{} images would have been pruned'.format(deleted_count))
              else:
                  print('{} images were pruned'.format(deleted_count))
      Description: >-
        This function will clean out old AMIs that are older than 3 days. It will not delete AMIs that are currently in use regardless of their age.
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt AMICleanRole.Arn
      Runtime: python3.7
      Timeout: 180

  AMICleanRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CloudWatchLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                Effect: "Allow"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
        - PolicyName: ManageAMI
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "ec2:DescribeImages"
                  - "ec2:DescribeInstances"
                  - "ec2:DeleteImage"
                  - "ec2:DeregisterImage"
                  - "ec2:DeleteSnapshot"
                Effect: "Allow"
                Resource: "*"
