---
Description: Security Groups for Environment
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Environment:
    Description: Name of the environment being deployed
    Type: String
    AllowedValues:
      - prod
      - dev

  NetworkStack:
    Type: String
    Description: Name of the network stack in this environment
    AllowedPattern: "[A-Za-z][A-Za-z0-9-]{0,127}"

  S3PrefixListId:
    Description: AWS S3 Prefix List Id
    Type: String
    Default: pl-6ca54005

Resources:
  BaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStack}::VpcId"
      GroupDescription: !Sub "${Environment} Base Security Group - Allow comms back to MYOB On Prem"
      SecurityGroupEgress:
        - CidrIp: 10.0.0.0/8
          IpProtocol: "-1"
          FromPort: "-1"
          ToPort: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-base-sg"

  S3SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStack}::VpcId"
      GroupDescription: !Sub "${Environment} S3 Security Group"
      SecurityGroupEgress:
        - Description: HTTPS
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          DestinationPrefixListId: !Ref S3PrefixListId
        - Description: HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          DestinationPrefixListId: !Ref S3PrefixListId
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-aws-s3-sg"

  APIsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStack}::VpcId"
      GroupDescription: !Sub "${Environment} AWS APIs Security Group"
      SecurityGroupEgress:
        - CidrIp: 52.95.36.0/22
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-aws-apis-sg"

  CloudFrontSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStack}::VpcId"
      GroupDescription: !Sub "${Environment} CloudFront Security Group"
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-aws-cloudfront-sg"

  Route53HealthChecks80SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStack}::VpcId"
      GroupDescription: !Sub "${Environment} TCP/80 Route53 Healthchecks"
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-aws-route53-healthchecks-80-sg"

  Route53HealthChecks443SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStack}::VpcId"
      GroupDescription: !Sub "${Environment} TCP/443 Route53 Healthchecks"
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-aws-route53-healthchecks-443-sg"

  CloudFrontFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        # Sourced from:
        # https://github.com/awslabs/aws-cloudfront-samples/blob/master/update_security_groups_lambda/update_security_groups.py
        ZipFile: |
          import hashlib
          import json
          import os
          import urllib2
          import boto3
          import botocore
          SERVICE = "CLOUDFRONT"
          INGRESS_PORTS = { 'http': 80, 'https': 443 }
          def handler(event, _context = None):
            print("Received event: " + json.dumps(event, indent=2))
            message = json.loads(event['Records'][0]['Sns']['Message'])
            ip_ranges = json.loads(get_ip_groups_json(message['url'], message['md5']))
            cf_ranges = get_ranges_for_service(ip_ranges, SERVICE)
            update_security_groups(cf_ranges)
          def get_ip_groups_json(url, expected_hash):
            print("Updating from " + url)
            response = urllib2.urlopen(url)
            ip_json = response.read()
            m = hashlib.md5()
            m.update(ip_json)
            hash = m.hexdigest()
            if hash != expected_hash:
              raise Exception('MD5 Mismatch: got ' + hash + ' expected ' + expected_hash)
            return ip_json
          def get_ranges_for_service(ranges, service):
            service_ranges = []
            for prefix in ranges['prefixes']:
              if prefix['service'] == service:
                print('Found ' + service + ' range: ' + prefix['ip_prefix'])
                service_ranges.append(prefix['ip_prefix'])
            return service_ranges
          def update_security_groups(new_ranges):
            client = boto3.client('ec2')
            for protocol in INGRESS_PORTS.keys():
              varname = protocol.upper() + '_GROUP_ID'
              if varname in os.environ:
                group_id = os.environ[varname]
                try:
                  group = client.describe_security_groups(GroupIds=[group_id])['SecurityGroups'][0]
                except botocore.exceptions.ClientError as e:
                  if e.response['Error']['Code'] == "InvalidGroup.NotFound":
                    print('WARNING: ' + protocol.upper() + ' security group '+ group_id + ' could not be found')
                  else:
                    raise e
                else:
                  update_security_group(client, group, new_ranges, INGRESS_PORTS[protocol])
          def update_security_group(client, group, new_ranges, port):
            if group['IpPermissions']:
              for permission in group['IpPermissions']:
                to_revoke = []
                to_add = []
                if [permission['FromPort'],permission['ToPort']] == [port,port]:
                  old_prefixes = []
                  for ip_range in permission['IpRanges']:
                    cidr = ip_range['CidrIp']
                    old_prefixes.append(cidr)
                    if cidr not in new_ranges:
                      to_revoke.append(ip_range)
                      print(group['GroupId'] + ": Revoking " + cidr + ":" + str(port) + '/' + str(permission['IpProtocol']))
                  for ip_range in new_ranges:
                    if ip_range not in old_prefixes:
                      to_add.append({ 'CidrIp': ip_range })
                      print(group['GroupId'] + ": Adding " + ip_range + ":" + str(port) + '/tcp')
                  revoke_permissions(client, group, permission, to_revoke)
                  add_permissions(client, group, port, to_add)
                else:
                  if permission['IpRanges']:
                    to_revoke = permission['IpRanges']
                    print(group['GroupId'] + ": Cleaning up non-matching rules")
                    revoke_permissions(client, group, permission, to_revoke)
            else:
              to_add = list()
              for ip_range in new_ranges:
                to_add.append({ 'CidrIp': ip_range })
                print(group['GroupId'] + ": Adding " + ip_range + ":" + str(port))
              add_permissions(client, group, port, to_add)
          def revoke_permissions(client, group, permission, to_revoke):
            if to_revoke:
              revoke_params = {'ToPort': permission['ToPort'],'FromPort':permission['FromPort'],'IpRanges': to_revoke,'IpProtocol': permission['IpProtocol']}
              client.revoke_security_group_ingress(GroupId=group['GroupId'], IpPermissions=[revoke_params])
          def add_permissions(client, group, port, to_add):
            if to_add:
              add_params = {'ToPort':port,'FromPort':port,'IpRanges':to_add,'IpProtocol':'tcp'}
              client.authorize_security_group_ingress(GroupId=group['GroupId'], IpPermissions=[add_params])
      Environment:
        Variables:
          HTTPS_GROUP_ID: !Ref CloudFrontSecurityGroup
      Description: >-
        This function will update your CloudFront Security Groups to allow it
        access to resources in your VPC
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CloudFrontFunctionRole.Arn
      Runtime: python2.7
      Timeout: 30

  CloudFrontFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: SecurityGroupManagement
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "ec2:DescribeSecurityGroups"
                Effect: "Allow"
                Resource:
                  - "*"
              - Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:RevokeSecurityGroupIngress"
                Effect: "Allow"
                Resource:
                  - !Join
                    - "/"
                    -
                      - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group"
                      - !Ref CloudFrontSecurityGroup
        - PolicyName: CloudWatchLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                Effect: "Allow"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*

  Route53HealthChecksFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        # Sourced from:
        # https://github.com/awslabs/aws-cloudfront-samples/blob/master/update_security_groups_lambda/update_security_groups.py
        ZipFile: |
          import hashlib
          import json
          import os
          import urllib2
          import boto3
          import botocore
          SERVICE = "ROUTE53_HEALTHCHECKS"
          INGRESS_PORTS = { 'http': 80, 'https': 443 }
          def handler(event, _context = None):
            print("Received event: " + json.dumps(event, indent=2))
            message = json.loads(event['Records'][0]['Sns']['Message'])
            ip_ranges = json.loads(get_ip_groups_json(message['url'], message['md5']))
            cf_ranges = get_ranges_for_service(ip_ranges, SERVICE)
            update_security_groups(cf_ranges)
          def get_ip_groups_json(url, expected_hash):
            print("Updating from " + url)
            response = urllib2.urlopen(url)
            ip_json = response.read()
            m = hashlib.md5()
            m.update(ip_json)
            hash = m.hexdigest()
            if hash != expected_hash:
              raise Exception('MD5 Mismatch: got ' + hash + ' expected ' + expected_hash)
            return ip_json
          def get_ranges_for_service(ranges, service):
            service_ranges = []
            for prefix in ranges['prefixes']:
              if prefix['service'] == service:
                print('Found ' + service + ' range: ' + prefix['ip_prefix'])
                service_ranges.append(prefix['ip_prefix'])
            return service_ranges
          def update_security_groups(new_ranges):
            client = boto3.client('ec2')
            for protocol in INGRESS_PORTS.keys():
              varname = protocol.upper() + '_GROUP_ID'
              if varname in os.environ:
                group_id = os.environ[varname]
                try:
                  group = client.describe_security_groups(GroupIds=[group_id])['SecurityGroups'][0]
                except botocore.exceptions.ClientError as e:
                  if e.response['Error']['Code'] == "InvalidGroup.NotFound":
                    print('WARNING: ' + protocol.upper() + ' security group '+ group_id + ' could not be found')
                  else:
                    raise e
                else:
                  update_security_group(client, group, new_ranges, INGRESS_PORTS[protocol])
          def update_security_group(client, group, new_ranges, port):
            if group['IpPermissions']:
              for permission in group['IpPermissions']:
                to_revoke = []
                to_add = []
                if [permission['FromPort'],permission['ToPort']] == [port,port]:
                  old_prefixes = []
                  for ip_range in permission['IpRanges']:
                    cidr = ip_range['CidrIp']
                    old_prefixes.append(cidr)
                    if cidr not in new_ranges:
                      to_revoke.append(ip_range)
                      print(group['GroupId'] + ": Revoking " + cidr + ":" + str(port) + '/' + str(permission['IpProtocol']))
                  for ip_range in new_ranges:
                    if ip_range not in old_prefixes:
                      to_add.append({ 'CidrIp': ip_range })
                      print(group['GroupId'] + ": Adding " + ip_range + ":" + str(port) + '/tcp')
                  revoke_permissions(client, group, permission, to_revoke)
                  add_permissions(client, group, port, to_add)
                else:
                  if permission['IpRanges']:
                    to_revoke = permission['IpRanges']
                    print(group['GroupId'] + ": Cleaning up non-matching rules")
                    revoke_permissions(client, group, permission, to_revoke)
            else:
              to_add = list()
              for ip_range in new_ranges:
                to_add.append({ 'CidrIp': ip_range })
                print(group['GroupId'] + ": Adding " + ip_range + ":" + str(port))
              add_permissions(client, group, port, to_add)
          def revoke_permissions(client, group, permission, to_revoke):
            if to_revoke:
              revoke_params = {'ToPort': permission['ToPort'],'FromPort':permission['FromPort'],'IpRanges': to_revoke,'IpProtocol': permission['IpProtocol']}
              client.revoke_security_group_ingress(GroupId=group['GroupId'], IpPermissions=[revoke_params])
          def add_permissions(client, group, port, to_add):
            if to_add:
              add_params = {'ToPort':port,'FromPort':port,'IpRanges':to_add,'IpProtocol':'tcp'}
              client.authorize_security_group_ingress(GroupId=group['GroupId'], IpPermissions=[add_params])
      Environment:
        Variables:
          HTTPS_GROUP_ID: !Ref Route53HealthChecks443SecurityGroup
          HTTP_GROUP_ID: !Ref Route53HealthChecks80SecurityGroup
      Description: >-
        This function will update your Route53 Health Checks Security Groups
        to allow it access to resources in your VPC
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt Route53HealthChecksFunctionRole.Arn
      Runtime: python2.7
      Timeout: 30

  Route53HealthChecksFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: SecurityGroupManagement
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "ec2:DescribeSecurityGroups"
                Effect: "Allow"
                Resource:
                  - "*"
              - Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:RevokeSecurityGroupIngress"
                Effect: "Allow"
                Resource:
                  - !Join
                    - "/"
                    -
                      - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group"
                      - !Ref Route53HealthChecks443SecurityGroup
                  - !Join
                    - "/"
                    -
                      - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group"
                      - !Ref Route53HealthChecks80SecurityGroup
        - PolicyName: CloudWatchLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                Effect: "Allow"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*

  APIsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        # Sourced from:
        # https://github.com/awslabs/aws-cloudfront-samples/blob/master/update_security_groups_lambda/update_security_groups.py
        ZipFile: |
          import hashlib
          import json
          import os
          import urllib2
          import boto3
          import botocore
          EGRESS_PORTS = { 'https': 443 }
          def handler(event, _context = None):
            print("Received event: " + json.dumps(event, indent=2))
            message = json.loads(event['Records'][0]['Sns']['Message'])
            ip_ranges = json.loads(get_ip_groups_json(message['url'], message['md5']))
            aws_ranges = get_ranges_for_service(ip_ranges)
            update_security_groups(aws_ranges)
          def get_ip_groups_json(url, expected_hash):
            print("Updating from " + url)
            response = urllib2.urlopen(url)
            ip_json = response.read()
            m = hashlib.md5()
            m.update(ip_json)
            hash = m.hexdigest()
            if hash != expected_hash:
              raise Exception('MD5 Mismatch: got ' + hash + ' expected ' + expected_hash)
            return ip_json
          def get_ranges_for_service(ranges):
            ec2_ranges = []
            for prefix in ranges['prefixes']:
              if prefix['service'] == 'EC2':
                ec2_ranges.append(prefix['ip_prefix'])
            service_ranges = []
            for prefix in ranges['prefixes']:
              if ((prefix['service'] == 'AMAZON' and (prefix['region'] == os.environ['REGION'])) and prefix['ip_prefix'] not in ec2_ranges):
                print('Found range: ' + prefix['ip_prefix'])
                service_ranges.append(prefix['ip_prefix'])
            return service_ranges
          def update_security_groups(new_ranges):
            client = boto3.client('ec2')
            for protocol in EGRESS_PORTS.keys():
              varname = protocol.upper() + '_GROUP_ID'
              if varname in os.environ:
                group_id = os.environ[varname]
                try:
                  group = client.describe_security_groups(GroupIds=[group_id])['SecurityGroups'][0]
                except botocore.exceptions.ClientError as e:
                  if e.response['Error']['Code'] == "InvalidGroup.NotFound":
                    print('WARNING: ' + protocol.upper() + ' security group '+ group_id + ' could not be found')
                  else:
                    raise e
                else:
                  update_security_group(client, group, new_ranges, EGRESS_PORTS[protocol])
          def update_security_group(client, group, new_ranges, port):
            if group['IpPermissionsEgress']:
              for permission in group['IpPermissionsEgress']:
                to_revoke = []
                to_add = []
                if [permission['FromPort'],permission['ToPort']] == [port,port]:
                  old_prefixes = []
                  for ip_range in permission['IpRanges']:
                    cidr = ip_range['CidrIp']
                    old_prefixes.append(cidr)
                    if cidr not in new_ranges:
                      to_revoke.append(ip_range)
                      print(group['GroupId'] + ": Revoking " + cidr + ":" + str(port) + '/' + str(permission['IpProtocol']))
                  for ip_range in new_ranges:
                    if ip_range not in old_prefixes:
                      to_add.append({ 'CidrIp': ip_range })
                      print(group['GroupId'] + ": Adding " + ip_range + ":" + str(port) + '/tcp')
                  revoke_permissions(client, group, permission, to_revoke)
                  add_permissions(client, group, port, to_add)
                else:
                  if permission['IpRanges']:
                    to_revoke = permission['IpRanges']
                    print(group['GroupId'] + ": Cleaning up non-matching rules")
                    revoke_permissions(client, group, permission, to_revoke)
            else:
              to_add = list()
              for ip_range in new_ranges:
                to_add.append({ 'CidrIp': ip_range })
                print(group['GroupId'] + ": Adding " + ip_range + ":" + str(port))
              add_permissions(client, group, port, to_add)
          def revoke_permissions(client, group, permission, to_revoke):
            if to_revoke:
              revoke_params = {'ToPort': permission['ToPort'],'FromPort':permission['FromPort'],'IpRanges': to_revoke,'IpProtocol': permission['IpProtocol']}
              client.revoke_security_group_egress(GroupId=group['GroupId'], IpPermissions=[revoke_params])
          def add_permissions(client, group, port, to_add):
            if to_add:
              add_params = {'ToPort':port,'FromPort':port,'IpRanges':to_add,'IpProtocol':'tcp'}
              client.authorize_security_group_egress(GroupId=group['GroupId'], IpPermissions=[add_params])
      Environment:
        Variables:
          HTTPS_GROUP_ID: !Ref APIsSecurityGroup
          REGION: !Ref AWS::Region
      Description: >-
        This function will update the AWS Security Group to allow it
        access to AWS API resources
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt APIsFunctionRole.Arn
      Runtime: python2.7
      Timeout: 30

  APIsFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: SecurityGroupManagement
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "ec2:DescribeSecurityGroups"
                Effect: "Allow"
                Resource:
                  - "*"
              - Action:
                  - "ec2:AuthorizeSecurityGroupEgress"
                  - "ec2:RevokeSecurityGroupEgress"
                Effect: "Allow"
                Resource:
                  - !Join
                    - "/"
                    -
                      - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group"
                      - !Ref APIsSecurityGroup
        - PolicyName: CloudWatchLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                Effect: "Allow"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*

Outputs:
  APIsFunctionArn:
    Description: A reference to the AWS APIs update Function
    Value: !GetAtt APIsFunction.Arn

  CloudFrontFunctionArn:
    Description: A reference to the CloudFront update Function
    Value: !GetAtt CloudFrontFunction.Arn

  Route53HealthChecksFunctionArn:
    Description: A reference to the Route53 Health Checks update Function
    Value: !GetAtt Route53HealthChecksFunction.Arn

  APIsSecurityGroup:
    Description: A reference to the AWS APIs Security Group
    Value: !Ref APIsSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}::APIsSecurityGroup"

  S3SecurityGroup:
    Description: A reference to the S3 Security Group
    Value: !Ref S3SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}::S3SecurityGroup"

  CloudFrontSecurityGroup:
    Description: A reference to the CloudFront Security Group
    Value: !Ref CloudFrontSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}::CloudFrontSecurityGroup"

  BaseSecurityGroup:
    Description: A reference to the Base Security Group
    Value: !Ref BaseSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}::BaseSecurityGroup"
